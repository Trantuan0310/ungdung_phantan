from celery import Celery
from datetime import datetime, timedelta
import sqlite3
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
from dotenv import load_dotenv
import traceback

# Load .env file
load_dotenv()

# Ki·ªÉm tra xem m√¥i tr∆∞·ªùng ƒë∆∞·ª£c load ƒë√∫ng ch∆∞a
env_vars = {
    'SMTP_SERVER': os.getenv('SMTP_SERVER'),
    'SMTP_PORT': os.getenv('SMTP_PORT'),
    'SMTP_USERNAME': os.getenv('SMTP_USERNAME') or os.getenv('SMTP_USER'),
    'SENDER_EMAIL': os.getenv('SENDER_EMAIL'),
}

print("==== Th√¥ng tin c·∫•u h√¨nh email ====")
print(f"SMTP Server: {env_vars['SMTP_SERVER']}")
print(f"SMTP Port: {env_vars['SMTP_PORT']}")
print(f"SMTP Username: {env_vars['SMTP_USERNAME']}")
print(f"Sender Email: {env_vars['SENDER_EMAIL']}")
print("===================================")

# C·∫•u h√¨nh Celery
app = Celery('tasks', broker='redis://localhost:6379/0')

# C·∫•u h√¨nh l·ªãch cho Celery Beat - ch·ªâ l√†m backup check
app.conf.beat_schedule = {
    'check-scheduled-emails-backup': {
        'task': 'tasks.check_scheduled_emails',
        'schedule': 30.0,  # Gi·∫£m xu·ªëng m·ªói 30s l√†m backup th√¥i
    },
}

@app.task
def check_scheduled_emails():
    """
    Ki·ªÉm tra c√°c email c√≥ l·ªãch g·ª≠i ƒë√£ ƒë·∫øn h·∫°n (backup cho ETA tasks)
    Ch·ªâ x·ª≠ l√Ω nh·ªØng email ch∆∞a ƒë∆∞·ª£c schedule b·∫±ng ETA
    """
    try:
        conn = sqlite3.connect('emails.db')
        cursor = conn.cursor()
        
        # L·∫•y th·ªùi gian hi·ªán t·∫°i theo ISO format
        current_time = datetime.now().isoformat()
        print(f"üîÑ [BACKUP CHECK] Ki·ªÉm tra email backup t·∫°i: {current_time}")
        
        # Ch·ªâ l·∫•y email pending (ch∆∞a ƒë∆∞·ª£c ETA schedule) v√† ƒë√£ ƒë·∫øn h·∫°n
        cursor.execute("""
            SELECT id, priority, scheduled_time 
            FROM emails 
            WHERE scheduled_time IS NOT NULL 
              AND scheduled_time <= ? 
              AND status='pending' 
              AND is_cancelled=0
            ORDER BY 
              CASE priority
                WHEN 'high' THEN 1
                WHEN 'medium' THEN 2
                WHEN 'low' THEN 3
                ELSE 4
              END,
              scheduled_time ASC
        """, (current_time,))
        
        emails = cursor.fetchall()
        conn.close()
        
        if emails:
            print(f"üö® [BACKUP] T√¨m th·∫•y {len(emails)} email b·ªã miss b·ªüi ETA, g·ª≠i ngay:")
            for email_id, priority, scheduled_time in emails:
                print(f"  üìß Email ID={email_id}, Priority={priority}, Scheduled={scheduled_time}")
                send_email_task.delay(email_id, priority=priority)
        else:
            print(f"‚úÖ [BACKUP] Kh√¥ng c√≥ email n√†o b·ªã miss")
            
    except Exception as e:
        error_time = datetime.now().isoformat()
        print(f"[{error_time}] ‚ùå L·ªñI backup check: {str(e)}")
        traceback.print_exc()

@app.task
def send_email_task(email_id, priority='medium'):
    """
    G·ª≠i email v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
    """
    conn = None
    start_time = datetime.now()
    print(f"üìß [{start_time.isoformat()}] B·∫ÆT ƒê·∫¶U G·ª¨I EMAIL ID={email_id}, Priority={priority.upper()}")
    
    try:
        # L·∫•y th√¥ng tin email t·ª´ database
        conn = sqlite3.connect('emails.db')
        cursor = conn.cursor()
        cursor.execute("SELECT recipient, subject, body, scheduled_time FROM emails WHERE id=? AND is_cancelled=0", (email_id,))
        row = cursor.fetchone()
        
        if not row:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y email ID={email_id} ho·∫∑c email ƒë√£ b·ªã h·ªßy")
            if conn:
                conn.close()
            return
        
        recipient, subject, body, scheduled_time = row
        
        # Ki·ªÉm tra xem c√≥ ƒë√∫ng th·ªùi gian kh√¥ng (cho ETA tasks)
        if scheduled_time:
            scheduled_dt = datetime.fromisoformat(scheduled_time)
            current_dt = datetime.now()
            time_diff = abs((current_dt - scheduled_dt).total_seconds())
            
            if time_diff > 2:  # Cho ph√©p sai l·ªách 2 gi√¢y
                print(f"‚ö†Ô∏è  Email ID={email_id} g·ª≠i mu·ªôn {time_diff:.1f}s (scheduled: {scheduled_time})")
            else:
                print(f"‚úÖ Email ID={email_id} g·ª≠i ƒë√∫ng th·ªùi gian (sai l·ªách: {time_diff:.1f}s)")
        
        print(f"üìã Th√¥ng tin: To={recipient}, Subject='{subject}'")
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i sang ƒëang g·ª≠i
        cursor.execute("UPDATE emails SET status='sending' WHERE id=?", (email_id,))
        conn.commit()
        
        # C·∫•u h√¨nh SMTP ƒë·ªÉ g·ª≠i email
        smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        smtp_port = int(os.getenv('SMTP_PORT', 587))
        smtp_username = os.getenv('SMTP_USERNAME') or os.getenv('SMTP_USER', '')
        smtp_password = os.getenv('SMTP_PASSWORD', '')
        sender_email = os.getenv('SENDER_EMAIL', smtp_username)
        
        # Debug th√¥ng tin SMTP (kh√¥ng hi·ªÉn th·ªã password)
        print(f"SMTP Config: Server={smtp_server}, Port={smtp_port}, Username={smtp_username}, Sender={sender_email}")
        
        # T·∫°o n·ªôi dung email
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = recipient
        msg['Subject'] = subject
        
        # Th√™m th√¥ng tin ∆∞u ti√™n v√†o header
        if priority == 'high':
            msg['X-Priority'] = '1'
        elif priority == 'low':
            msg['X-Priority'] = '5'
        else:  # medium
            msg['X-Priority'] = '3'
        
        msg.attach(MIMEText(body, 'plain'))
        
        # G·ª≠i email qua SMTP
        try:
            print(f"ƒêang k·∫øt n·ªëi ƒë·∫øn SMTP server {smtp_server}:{smtp_port}...")
            server = smtplib.SMTP(smtp_server, smtp_port)
            print("B·∫Øt ƒë·∫ßu TLS...")
            server.starttls()
            print(f"ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n {smtp_username}...")
            server.login(smtp_username, smtp_password)
            text = msg.as_string()
            print(f"G·ª≠i email t·ªõi {recipient}...")
            server.sendmail(sender_email, recipient, text)
            print("ƒê√≥ng k·∫øt n·ªëi SMTP...")
            server.quit()
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
            cursor.execute("UPDATE emails SET status='sent' WHERE id=?", (email_id,))
            conn.commit()
            print(f"Email ID={email_id} ƒë√£ g·ª≠i th√†nh c√¥ng")
        
        except Exception as smtp_error:
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i
            cursor.execute("UPDATE emails SET status='failed' WHERE id=?", (email_id,))
            conn.commit()
            print(f"L·ªói g·ª≠i email ID={email_id}: {str(smtp_error)}")
            traceback.print_exc()
        
    except Exception as e:
        print(f"L·ªói x·ª≠ l√Ω email ID={email_id}: {str(e)}")
        traceback.print_exc()
        # N·∫øu c√≥ l·ªói v√† k·∫øt n·ªëi database v·∫´n m·ªü, c·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("UPDATE emails SET status='failed' WHERE id=?", (email_id,))
                conn.commit()
            except:
                pass
    
    finally:
        # ƒê·∫£m b·∫£o ƒë√≥ng k·∫øt n·ªëi database trong m·ªçi tr∆∞·ªùng h·ª£p
        if conn:
            conn.close()

@app.task
def schedule_email_with_eta(email_id, scheduled_time_str):
    """
    L√™n l·ªãch g·ª≠i email v·ªõi ETA ch√≠nh x√°c (kh√¥ng delay)
    """
    try:
        scheduled_time = datetime.fromisoformat(scheduled_time_str)
        current_time = datetime.now()
        
        print(f"üìÖ SCHEDULE EMAIL ID={email_id} cho {scheduled_time.isoformat()}")
        print(f"‚è∞ Th·ªùi gian hi·ªán t·∫°i: {current_time.isoformat()}")
        
        if scheduled_time <= current_time:
            # N·∫øu th·ªùi gian ƒë√£ qua, g·ª≠i ngay
            print(f"‚ö° Th·ªùi gian ƒë√£ qua, g·ª≠i ngay email ID={email_id}")
            send_email_task.delay(email_id)
        else:
            # Schedule v·ªõi ETA ch√≠nh x√°c
            time_diff = scheduled_time - current_time
            print(f"‚è≥ S·∫Ω g·ª≠i sau {time_diff.total_seconds():.1f} gi√¢y")
            
            task_result = send_email_task.apply_async(
                args=[email_id],
                eta=scheduled_time,
                task_id=f"email_{email_id}_{int(scheduled_time.timestamp())}"
            )
            
            print(f"‚úÖ Email ID={email_id} ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch v·ªõi Task ID: {task_result.id}")
            
            # C·∫≠p nh·∫≠t status trong database ƒë·ªÉ theo d√µi
            conn = sqlite3.connect('emails.db')
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE emails SET status='scheduled' WHERE id=?", 
                (email_id,)
            )
            conn.commit()
            conn.close()
            
            return task_result.id
            
    except Exception as e:
        error_time = datetime.now().isoformat()
        print(f"[{error_time}] ‚ùå L·ªñI schedule email ID={email_id}: {str(e)}")
        traceback.print_exc()
        return None
